import json
import config
import requests
import database
from aiogram import *
import functions as func

db = database.ORM()
bot = Bot(config.TOKEN)
dp = Dispatcher(bot)

# @dp.message_handler()
# async def echo(message: types.Message):
#     await message.answer(message.text)

@dp.message_handler(commands=['start'])
async def check_money(message: types.Message):
    await message.answer(db.add_user(message.from_user.id))
    await message.answer(config.start)


@dp.message_handler(commands=['check'])
async def check_money(message: types.Message):
    
        mes = await message.answer('‚ö†Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ...')
        values = func.get_coins()
        await mes.edit_text('–ü–æ–ª—É—á–∏–ª –∫—É—Ä—Å—ã –º–æ–Ω–µ—Ç')

        user_money = db.get_user_money(message.from_user.id)
        
        page_values = ""
        for coin in values:
            page_values += f'{coin[0][:3]} | $ {coin[1]}\n'

        rub = func.get_rub()

        await mes.edit_text('–°—á–∏—Ç–∞—é —Ç–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞')
        page_money = ''
        for coin in values:
            try:
                um = user_money.get(coin[0])
                page_money += f"<code>{coin[0][:3]}</code> = ‚ÇΩ{rub * um * coin[1]:.2f} | {um:.3f} ü™ô\n" if um is not None else ''
            except:
                pass

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # coin, amount, buy = db.get_user_money(message.from_user.id)
        # await mes.edit_text('–í—Å–ø–æ–º–∏–Ω–∞—é —Ç–≤–æ–π –∫–æ—à–µ–ª—ë–∫')
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        # usd_bitcoin = float(f'{bitcoin_value * (float(amount)):.4f}')

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        # await mes.edit_text('–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –º–æ–Ω–µ—Ç...')
        # procent = usd_bitcoin/buy*100-100
        # await mes.delete()

        # {usd_bitcoin}/{buy}*100-100
        await mes.delete()
        await bot.send_photo(chat_id=message.from_user.id, 
                             photo=open('logotype.png', 'rb').read(), 
                             caption=f'<pre>{page_values}</pre>\n–í–∞—à –±–∞–ª–∞–Ω—Å:\n{page_money}',
                             parse_mode='HTML')


@dp.message_handler(commands=['delete'])
async def check_money(message: types.Message):
    money = message.text.replace('/delete ', '')
    money_exist = db.get_user_money(message.from_user.id)
    money_exist[money] = None
    db.update_user_money(money_exist, message.from_user.id)
    await message.answer('–í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω!')

@dp.message_handler(commands=['change'])
async def check_money(message: types.Message):
    try:
        money = message.text.replace('/change ', '').split('\n')
        money_exist = db.get_user_money(message.from_user.id)

        for data in money:
            money_exist[data.split()[0]] = float(data.split()[1])

        db.update_user_money(money_exist, message.from_user.id)
        await message.answer('–í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω!')
    except Exception as e:
        print(e)
        await message.answer(config.error_mes, parse_mode='HTML')


@dp.message_handler(commands=['help'])
async def check_money(message: types.Message):
    if len(message.text) > 6:
        await message.answer(config.help_command.get(
        message.text.replace('/help ', '')
    ), parse_mode='HTML')
    else:
        await message.answer(config.help)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)